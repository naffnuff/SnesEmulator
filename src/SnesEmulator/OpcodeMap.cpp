#include "OpcodeMap.h"

#include <stdint.h>

#include "Opcode.h"
#include "State.h"

Instruction* OpcodeMap::getNextInstruction(const State& state) const
{
    uint8_t opcode = state.readProgramByte();
    if (state.is16Bit(State::m) && instructions16BitM[opcode]) {
        return instructions16BitM[opcode].get();
    } else if (state.is16Bit(State::x) && instructions16BitX[opcode]) {
        return instructions16BitX[opcode].get();
    } else {
        return instructions[opcode].get();
    }
}

OpcodeMap::OpcodeMap()
{
    instructions[0x61] = std::make_unique<Opcode::ADC_61>();
    instructions[0x63] = std::make_unique<Opcode::ADC_63>();
    instructions[0x65] = std::make_unique<Opcode::ADC_65>();
    instructions[0x67] = std::make_unique<Opcode::ADC_67>();
    instructions[0x69] = std::make_unique<Opcode::ADC_69>();
    instructions16BitM[0x69] = std::make_unique<Opcode::ADC_69_16Bit>();
    instructions[0x6D] = std::make_unique<Opcode::ADC_6D>();
    instructions[0x6F] = std::make_unique<Opcode::ADC_6F>();
    instructions[0x71] = std::make_unique<Opcode::ADC_71>();
    instructions[0x72] = std::make_unique<Opcode::ADC_72>();
    instructions[0x73] = std::make_unique<Opcode::ADC_73>();
    instructions[0x75] = std::make_unique<Opcode::ADC_75>();
    instructions[0x77] = std::make_unique<Opcode::ADC_77>();
    instructions[0x79] = std::make_unique<Opcode::ADC_79>();
    instructions[0x7D] = std::make_unique<Opcode::ADC_7D>();
    instructions[0x7F] = std::make_unique<Opcode::ADC_7F>();
    instructions[0x21] = std::make_unique<Opcode::AND_21>();
    instructions[0x23] = std::make_unique<Opcode::AND_23>();
    instructions[0x25] = std::make_unique<Opcode::AND_25>();
    instructions[0x27] = std::make_unique<Opcode::AND_27>();
    instructions[0x29] = std::make_unique<Opcode::AND_29>();
    instructions16BitM[0x29] = std::make_unique<Opcode::AND_29_16Bit>();
    instructions[0x2D] = std::make_unique<Opcode::AND_2D>();
    instructions[0x2F] = std::make_unique<Opcode::AND_2F>();
    instructions[0x31] = std::make_unique<Opcode::AND_31>();
    instructions[0x32] = std::make_unique<Opcode::AND_32>();
    instructions[0x33] = std::make_unique<Opcode::AND_33>();
    instructions[0x35] = std::make_unique<Opcode::AND_35>();
    instructions[0x37] = std::make_unique<Opcode::AND_37>();
    instructions[0x39] = std::make_unique<Opcode::AND_39>();
    instructions[0x3D] = std::make_unique<Opcode::AND_3D>();
    instructions[0x3F] = std::make_unique<Opcode::AND_3F>();
    instructions[0x06] = std::make_unique<Opcode::ASL_06>();
    instructions[0x0A] = std::make_unique<Opcode::ASL_0A>();
    instructions[0x0E] = std::make_unique<Opcode::ASL_0E>();
    instructions[0x16] = std::make_unique<Opcode::ASL_16>();
    instructions[0x1E] = std::make_unique<Opcode::ASL_1E>();
    instructions[0x90] = std::make_unique<Opcode::BCC_90>();
    instructions[0xB0] = std::make_unique<Opcode::BCS_B0>();
    instructions[0xF0] = std::make_unique<Opcode::BEQ_F0>();
    instructions[0x24] = std::make_unique<Opcode::BIT_24>();
    instructions[0x2C] = std::make_unique<Opcode::BIT_2C>();
    instructions[0x34] = std::make_unique<Opcode::BIT_34>();
    instructions[0x3C] = std::make_unique<Opcode::BIT_3C>();
    instructions[0x89] = std::make_unique<Opcode::BIT_89>();
    instructions16BitM[0x89] = std::make_unique<Opcode::BIT_89_16Bit>();
    instructions[0x30] = std::make_unique<Opcode::BMI_30>();
    instructions[0xD0] = std::make_unique<Opcode::BNE_D0>();
    instructions[0x10] = std::make_unique<Opcode::BPL_10>();
    instructions[0x80] = std::make_unique<Opcode::BRA_80>();
    instructions[0x00] = std::make_unique<Opcode::BRK_00>();
    instructions[0x82] = std::make_unique<Opcode::BRL_82>();
    instructions[0x50] = std::make_unique<Opcode::BVC_50>();
    instructions[0x70] = std::make_unique<Opcode::BVS_70>();
    instructions[0x18] = std::make_unique<Opcode::CLC_18>();
    instructions[0xD8] = std::make_unique<Opcode::CLD_D8>();
    instructions[0x58] = std::make_unique<Opcode::CLI_58>();
    instructions[0xB8] = std::make_unique<Opcode::CLV_B8>();
    instructions[0xC1] = std::make_unique<Opcode::CMP_C1>();
    instructions[0xC3] = std::make_unique<Opcode::CMP_C3>();
    instructions[0xC5] = std::make_unique<Opcode::CMP_C5>();
    instructions[0xC7] = std::make_unique<Opcode::CMP_C7>();
    instructions[0xC9] = std::make_unique<Opcode::CMP_C9>();
    instructions16BitM[0xC9] = std::make_unique<Opcode::CMP_C9_16Bit>();
    instructions[0xCD] = std::make_unique<Opcode::CMP_CD>();
    instructions[0xCF] = std::make_unique<Opcode::CMP_CF>();
    instructions[0xD1] = std::make_unique<Opcode::CMP_D1>();
    instructions[0xD2] = std::make_unique<Opcode::CMP_D2>();
    instructions[0xD3] = std::make_unique<Opcode::CMP_D3>();
    instructions[0xD5] = std::make_unique<Opcode::CMP_D5>();
    instructions[0xD7] = std::make_unique<Opcode::CMP_D7>();
    instructions[0xD9] = std::make_unique<Opcode::CMP_D9>();
    instructions[0xDD] = std::make_unique<Opcode::CMP_DD>();
    instructions[0xDF] = std::make_unique<Opcode::CMP_DF>();
    instructions[0x02] = std::make_unique<Opcode::COP_02>();
    instructions[0xE0] = std::make_unique<Opcode::CPX_E0>();
    instructions16BitX[0xE0] = std::make_unique<Opcode::CPX_E0_16Bit>();
    instructions[0xE4] = std::make_unique<Opcode::CPX_E4>();
    instructions[0xEC] = std::make_unique<Opcode::CPX_EC>();
    instructions[0xC0] = std::make_unique<Opcode::CPY_C0>();
    instructions16BitX[0xC0] = std::make_unique<Opcode::CPY_C0_16Bit>();
    instructions[0xC4] = std::make_unique<Opcode::CPY_C4>();
    instructions[0xCC] = std::make_unique<Opcode::CPY_CC>();
    instructions[0x3A] = std::make_unique<Opcode::DEC_3A>();
    instructions[0xC6] = std::make_unique<Opcode::DEC_C6>();
    instructions[0xCE] = std::make_unique<Opcode::DEC_CE>();
    instructions[0xD6] = std::make_unique<Opcode::DEC_D6>();
    instructions[0xDE] = std::make_unique<Opcode::DEC_DE>();
    instructions[0xCA] = std::make_unique<Opcode::DEX_CA>();
    instructions[0x88] = std::make_unique<Opcode::DEY_88>();
    instructions[0x41] = std::make_unique<Opcode::EOR_41>();
    instructions[0x43] = std::make_unique<Opcode::EOR_43>();
    instructions[0x45] = std::make_unique<Opcode::EOR_45>();
    instructions[0x47] = std::make_unique<Opcode::EOR_47>();
    instructions[0x49] = std::make_unique<Opcode::EOR_49>();
    instructions16BitM[0x49] = std::make_unique<Opcode::EOR_49_16Bit>();
    instructions[0x4D] = std::make_unique<Opcode::EOR_4D>();
    instructions[0x4F] = std::make_unique<Opcode::EOR_4F>();
    instructions[0x51] = std::make_unique<Opcode::EOR_51>();
    instructions[0x52] = std::make_unique<Opcode::EOR_52>();
    instructions[0x53] = std::make_unique<Opcode::EOR_53>();
    instructions[0x55] = std::make_unique<Opcode::EOR_55>();
    instructions[0x57] = std::make_unique<Opcode::EOR_57>();
    instructions[0x59] = std::make_unique<Opcode::EOR_59>();
    instructions[0x5D] = std::make_unique<Opcode::EOR_5D>();
    instructions[0x5F] = std::make_unique<Opcode::EOR_5F>();
    instructions[0x1A] = std::make_unique<Opcode::INC_1A>();
    instructions[0xE6] = std::make_unique<Opcode::INC_E6>();
    instructions[0xEE] = std::make_unique<Opcode::INC_EE>();
    instructions[0xF6] = std::make_unique<Opcode::INC_F6>();
    instructions[0xFE] = std::make_unique<Opcode::INC_FE>();
    instructions[0xE8] = std::make_unique<Opcode::INX_E8>();
    instructions[0xC8] = std::make_unique<Opcode::INY_C8>();
    instructions[0x4C] = std::make_unique<Opcode::JMP_4C>();
    instructions[0x5C] = std::make_unique<Opcode::JMP_5C>();
    instructions[0x6C] = std::make_unique<Opcode::JMP_6C>();
    instructions[0x7C] = std::make_unique<Opcode::JMP_7C>();
    instructions[0xDC] = std::make_unique<Opcode::JMP_DC>();
    instructions[0x20] = std::make_unique<Opcode::JSR_20>();
    instructions[0x22] = std::make_unique<Opcode::JSR_22>();
    instructions[0xFC] = std::make_unique<Opcode::JSR_FC>();
    instructions[0xA1] = std::make_unique<Opcode::LDA_A1>();
    instructions[0xA3] = std::make_unique<Opcode::LDA_A3>();
    instructions[0xA5] = std::make_unique<Opcode::LDA_A5>();
    instructions[0xA7] = std::make_unique<Opcode::LDA_A7>();
    instructions[0xA9] = std::make_unique<Opcode::LDA_A9>();
    instructions16BitM[0xA9] = std::make_unique<Opcode::LDA_A9_16Bit>();
    instructions[0xAD] = std::make_unique<Opcode::LDA_AD>();
    instructions[0xAF] = std::make_unique<Opcode::LDA_AF>();
    instructions[0xB1] = std::make_unique<Opcode::LDA_B1>();
    instructions[0xB2] = std::make_unique<Opcode::LDA_B2>();
    instructions[0xB3] = std::make_unique<Opcode::LDA_B3>();
    instructions[0xB5] = std::make_unique<Opcode::LDA_B5>();
    instructions[0xB7] = std::make_unique<Opcode::LDA_B7>();
    instructions[0xB9] = std::make_unique<Opcode::LDA_B9>();
    instructions[0xBD] = std::make_unique<Opcode::LDA_BD>();
    instructions[0xBF] = std::make_unique<Opcode::LDA_BF>();
    instructions[0xA2] = std::make_unique<Opcode::LDX_A2>();
    instructions16BitX[0xA2] = std::make_unique<Opcode::LDX_A2_16Bit>();
    instructions[0xA6] = std::make_unique<Opcode::LDX_A6>();
    instructions[0xAE] = std::make_unique<Opcode::LDX_AE>();
    instructions[0xB6] = std::make_unique<Opcode::LDX_B6>();
    instructions[0xBE] = std::make_unique<Opcode::LDX_BE>();
    instructions[0xA0] = std::make_unique<Opcode::LDY_A0>();
    instructions16BitX[0xA0] = std::make_unique<Opcode::LDY_A0_16Bit>();
    instructions[0xA4] = std::make_unique<Opcode::LDY_A4>();
    instructions[0xAC] = std::make_unique<Opcode::LDY_AC>();
    instructions[0xB4] = std::make_unique<Opcode::LDY_B4>();
    instructions[0xBC] = std::make_unique<Opcode::LDY_BC>();
    instructions[0x46] = std::make_unique<Opcode::LSR_46>();
    instructions[0x4A] = std::make_unique<Opcode::LSR_4A>();
    instructions[0x4E] = std::make_unique<Opcode::LSR_4E>();
    instructions[0x56] = std::make_unique<Opcode::LSR_56>();
    instructions[0x5E] = std::make_unique<Opcode::LSR_5E>();
    instructions[0x54] = std::make_unique<Opcode::MVN_54>();
    instructions[0x44] = std::make_unique<Opcode::MVP_44>();
    instructions[0xEA] = std::make_unique<Opcode::NOP_EA>();
    instructions[0x01] = std::make_unique<Opcode::ORA_01>();
    instructions[0x03] = std::make_unique<Opcode::ORA_03>();
    instructions[0x05] = std::make_unique<Opcode::ORA_05>();
    instructions[0x07] = std::make_unique<Opcode::ORA_07>();
    instructions[0x09] = std::make_unique<Opcode::ORA_09>();
    instructions16BitM[0x09] = std::make_unique<Opcode::ORA_09_16Bit>();
    instructions[0x0D] = std::make_unique<Opcode::ORA_0D>();
    instructions[0x0F] = std::make_unique<Opcode::ORA_0F>();
    instructions[0x11] = std::make_unique<Opcode::ORA_11>();
    instructions[0x12] = std::make_unique<Opcode::ORA_12>();
    instructions[0x13] = std::make_unique<Opcode::ORA_13>();
    instructions[0x15] = std::make_unique<Opcode::ORA_15>();
    instructions[0x17] = std::make_unique<Opcode::ORA_17>();
    instructions[0x19] = std::make_unique<Opcode::ORA_19>();
    instructions[0x1D] = std::make_unique<Opcode::ORA_1D>();
    instructions[0x1F] = std::make_unique<Opcode::ORA_1F>();
    instructions[0xF4] = std::make_unique<Opcode::PEA_F4>();
    instructions[0xD4] = std::make_unique<Opcode::PEI_D4>();
    instructions[0x62] = std::make_unique<Opcode::PER_62>();
    instructions[0x48] = std::make_unique<Opcode::PHA_48>();
    instructions[0x8B] = std::make_unique<Opcode::PHB_8B>();
    instructions[0x0B] = std::make_unique<Opcode::PHD_0B>();
    instructions[0x4B] = std::make_unique<Opcode::PHK_4B>();
    instructions[0x08] = std::make_unique<Opcode::PHP_08>();
    instructions[0xDA] = std::make_unique<Opcode::PHX_DA>();
    instructions[0x5A] = std::make_unique<Opcode::PHY_5A>();
    instructions[0x68] = std::make_unique<Opcode::PLA_68>();
    instructions[0xAB] = std::make_unique<Opcode::PLB_AB>();
    instructions[0x2B] = std::make_unique<Opcode::PLD_2B>();
    instructions[0x28] = std::make_unique<Opcode::PLP_28>();
    instructions[0xFA] = std::make_unique<Opcode::PLX_FA>();
    instructions[0x7A] = std::make_unique<Opcode::PLY_7A>();
    instructions[0xC2] = std::make_unique<Opcode::REP_C2>();
    instructions[0x26] = std::make_unique<Opcode::ROL_26>();
    instructions[0x2A] = std::make_unique<Opcode::ROL_2A>();
    instructions[0x2E] = std::make_unique<Opcode::ROL_2E>();
    instructions[0x36] = std::make_unique<Opcode::ROL_36>();
    instructions[0x3E] = std::make_unique<Opcode::ROL_3E>();
    instructions[0x66] = std::make_unique<Opcode::ROR_66>();
    instructions[0x6A] = std::make_unique<Opcode::ROR_6A>();
    instructions[0x6E] = std::make_unique<Opcode::ROR_6E>();
    instructions[0x76] = std::make_unique<Opcode::ROR_76>();
    instructions[0x7E] = std::make_unique<Opcode::ROR_7E>();
    instructions[0x40] = std::make_unique<Opcode::RTI_40>();
    instructions[0x6B] = std::make_unique<Opcode::RTL_6B>();
    instructions[0x60] = std::make_unique<Opcode::RTS_60>();
    instructions[0xE1] = std::make_unique<Opcode::SBC_E1>();
    instructions[0xE3] = std::make_unique<Opcode::SBC_E3>();
    instructions[0xE5] = std::make_unique<Opcode::SBC_E5>();
    instructions[0xE7] = std::make_unique<Opcode::SBC_E7>();
    instructions[0xE9] = std::make_unique<Opcode::SBC_E9>();
    instructions16BitM[0xE9] = std::make_unique<Opcode::SBC_E9_16Bit>();
    instructions[0xED] = std::make_unique<Opcode::SBC_ED>();
    instructions[0xEF] = std::make_unique<Opcode::SBC_EF>();
    instructions[0xF1] = std::make_unique<Opcode::SBC_F1>();
    instructions[0xF2] = std::make_unique<Opcode::SBC_F2>();
    instructions[0xF3] = std::make_unique<Opcode::SBC_F3>();
    instructions[0xF5] = std::make_unique<Opcode::SBC_F5>();
    instructions[0xF7] = std::make_unique<Opcode::SBC_F7>();
    instructions[0xF9] = std::make_unique<Opcode::SBC_F9>();
    instructions[0xFD] = std::make_unique<Opcode::SBC_FD>();
    instructions[0xFF] = std::make_unique<Opcode::SBC_FF>();
    instructions[0x38] = std::make_unique<Opcode::SEC_38>();
    instructions[0xF8] = std::make_unique<Opcode::SED_F8>();
    instructions[0x78] = std::make_unique<Opcode::SEI_78>();
    instructions[0xE2] = std::make_unique<Opcode::SEP_E2>();
    instructions[0x81] = std::make_unique<Opcode::STA_81>();
    instructions[0x83] = std::make_unique<Opcode::STA_83>();
    instructions[0x85] = std::make_unique<Opcode::STA_85>();
    instructions[0x87] = std::make_unique<Opcode::STA_87>();
    instructions[0x8D] = std::make_unique<Opcode::STA_8D>();
    instructions[0x8F] = std::make_unique<Opcode::STA_8F>();
    instructions[0x91] = std::make_unique<Opcode::STA_91>();
    instructions[0x92] = std::make_unique<Opcode::STA_92>();
    instructions[0x93] = std::make_unique<Opcode::STA_93>();
    instructions[0x95] = std::make_unique<Opcode::STA_95>();
    instructions[0x97] = std::make_unique<Opcode::STA_97>();
    instructions[0x99] = std::make_unique<Opcode::STA_99>();
    instructions[0x9D] = std::make_unique<Opcode::STA_9D>();
    instructions[0x9F] = std::make_unique<Opcode::STA_9F>();
    instructions[0xDB] = std::make_unique<Opcode::STP_DB>();
    instructions[0x86] = std::make_unique<Opcode::STX_86>();
    instructions[0x8E] = std::make_unique<Opcode::STX_8E>();
    instructions[0x96] = std::make_unique<Opcode::STX_96>();
    instructions[0x84] = std::make_unique<Opcode::STY_84>();
    instructions[0x8C] = std::make_unique<Opcode::STY_8C>();
    instructions[0x94] = std::make_unique<Opcode::STY_94>();
    instructions[0x64] = std::make_unique<Opcode::STZ_64>();
    instructions[0x74] = std::make_unique<Opcode::STZ_74>();
    instructions[0x9C] = std::make_unique<Opcode::STZ_9C>();
    instructions[0x9E] = std::make_unique<Opcode::STZ_9E>();
    instructions[0xAA] = std::make_unique<Opcode::TAX_AA>();
    instructions[0xA8] = std::make_unique<Opcode::TAY_A8>();
    instructions[0x5B] = std::make_unique<Opcode::TCD_5B>();
    instructions[0x1B] = std::make_unique<Opcode::TCS_1B>();
    instructions[0x7B] = std::make_unique<Opcode::TDC_7B>();
    instructions[0x14] = std::make_unique<Opcode::TRB_14>();
    instructions[0x1C] = std::make_unique<Opcode::TRB_1C>();
    instructions[0x04] = std::make_unique<Opcode::TSB_04>();
    instructions[0x0C] = std::make_unique<Opcode::TSB_0C>();
    instructions[0x3B] = std::make_unique<Opcode::TSC_3B>();
    instructions[0xBA] = std::make_unique<Opcode::TSX_BA>();
    instructions[0x8A] = std::make_unique<Opcode::TXA_8A>();
    instructions[0x9A] = std::make_unique<Opcode::TXS_9A>();
    instructions[0x9B] = std::make_unique<Opcode::TXY_9B>();
    instructions[0x98] = std::make_unique<Opcode::TYA_98>();
    instructions[0xBB] = std::make_unique<Opcode::TYX_BB>();
    instructions[0xCB] = std::make_unique<Opcode::WAI_CB>();
    instructions[0x42] = std::make_unique<Opcode::WDM_42>();
    instructions[0xEB] = std::make_unique<Opcode::XBA_EB>();
    instructions[0xFB] = std::make_unique<Opcode::XCE_FB>();
}
